# Crappy parser.  Only uses a comma to delineate the end of a line, so
# all comments must end with a comma. A single quote inside a comment
# also screws up the parsing.
#
# The goal is to pass all of the following:
#
#     bugprone-*
#     cert-*
#     clang-analyzer-*
#     cppcoreguidelines-*
#     misc-*
#     modernize-*
#     performance-*
#     readability-*
#
# Some specific checks may never be enabled, like
# clang-analyzer-security.insecureAPI.strcpy which requires a missing
# library to fix problems.  Others like modernize-redundant-void-arg
# seem unnecessary.  Some others may never be enabled by default, like
# clang-analyzer-core.CallAndMessage which doesn't understand
# dynamic_cast and gives lots of false positives.
#,

Checks: '-*,

    bugprone-*,
        # Bunch of warnings.... ,
        # Comment out this and the cppcoreguidelines version. ,
       -bugprone-narrowing-conversions,

    # Explicitly list the tests that arent aliases. ,
    cert-*,

        # Dont declare c-style varardic functions. ,
       -cert-dcl50-cpp,

        # Using function invokes a command interpreter. Should fix. ,
       -cert-env33-c,

        # Should throw anonymous temporary values.
       -cert-err09-cpp,
       -cert-err61-cpp,

        # string-to-number conversion functions that do not verify the
        # validity of the conversion. Needs work. ,
       -cert-err34-c,

        # Lots of complaints about constructors of static objects
        # possibly throwing exceptions that cant be caught.  These
        # all appear to be within Qt code that cant be fixed by us. ,
       -cert-err58-cpp,

    clang-analyzer-*,
        # Not tested. ,
       -clang-analyzer-apiModeling.*,

        # Treats dynamic_cast like static_cast.  Doesnt understand
        # that dynamic_cast may return nullptr if the inheritance is
        # wrong, but a valid pointer if the inheritance is right. ,
        #
        # One valid error in m_groupName in globalsettings.cpp??? ,
       -clang-analyzer-core.CallAndMessage,

        # mytharchivehelper/external/pxsup2dast.c has try/catch code. ,
       -clang-analyzer-core.StackAddrEscapeBase,

        # Doesnt recognize cases where the constructor adds the new
        # object to a list (either static or in the parent.)
        #
        # There are some warnings in the commercial detectors that
        # need to be chased down. ,
       -clang-analyzer-cplusplus.NewDeleteLeaks,

        # Most testing on x86-64. ,
       -clang-analyzer-osx.*,

        # Cant fix due to missing LIB_EXT1 extensions. ,
       -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
       -clang-analyzer-security.insecureAPI.strcpy,

    # Explicitly list the tests that arent aliases. ,
    #cppcoreguidelines-*,
       -cppcoreguidelines-avoid-goto,
       -cppcoreguidelines-interfaces-global-init,
       -cppcoreguidelines-macro-usage,

        # Bunch of warnings.... ,
       -cppcoreguidelines-narrowing-conversions,
       -cppcoreguidelines-no-malloc,

        # No gsl. ,
       -cppcoreguidelines-owning-memory,

        # No gsl. Warning on every log message.
        # "do not implicitly decay an array into a pointer; consider
        #  using gsl::array_view or an explicit cast instead" ,
       -cppcoreguidelines-pro-bounds-array-to-pointer-decay,

        # No gsl. Recommends gsl::at be used in 1611 places. ,
       -cppcoreguidelines-pro-bounds-constant-array-index,

        # Bunch of warnings.... ,
       -cppcoreguidelines-pro-bounds-pointer-arithmetic,
       -cppcoreguidelines-pro-type-const-cast,
        # Bunch of warnings.... ,
       -cppcoreguidelines-pro-type-cstyle-cast,
       -cppcoreguidelines-pro-type-member-init,
       -cppcoreguidelines-pro-type-reinterpret-cast,

        # The qapplication.h header file includes a static_cast.
       -cppcoreguidelines-pro-type-static-cast-downcast,

        # Recommends using boost:: to access unions. ,
       -cppcoreguidelines-pro-type-union-access,

        # Warns on every LogPrintLine. ,
       -cppcoreguidelines-pro-type-vararg,

       -cppcoreguidelines-slicing,
       -cppcoreguidelines-special-member-functions,

    google-explicit-constructor,
   -google-runtime-int,

    misc-*,

        # Cases exist. Need to add getters/setters to classes. ,
       -misc-non-private-member-variables-in-classes,

        # Cases exist. Need evaluation. ,
       -misc-throw-by-value-catch-by-reference,

    modernize-*,

        # Lots of changes to be done. ,
       -modernize-avoid-c-arrays,

        # Not investigated yet. ,
       -modernize-loop-convert,

        # Run again.  Seems like should do more.  Supposedly presence
        # of *any* of \\, \<squote>, \<dquote>, \?, octal, hex. ,
       -modernize-raw-string-literal,

        # Noisy!!!  foo(void) => foo()  ,
       -modernize-redundant-void-arg,

        # Why would anyone want this? ,
       -modernize-use-trailing-return-type,

        ## C++14 modernize-make-unique,
        ## C++14 modernize-use-transparent-functors,
        ## C++17 modernize-concat-nested-namespaces,
        ## C++17 modernize-unary-static-assert,
        ## C++17 modernize-use-nodiscard,

    performance-*,

    readability-*,

        # Not investigated yet. ,
       -readability-braces-around-statements,
        # Not investigated yet. ,
       -readability-function-size,

        # Wants to convert all "if (x)" pointer validity checks to be
        # "if (x != nullptr)".  These should be ignored as the
        # AllowPointerConditions key is set to "1", but tidy complains
        # anyway. ,
       -readability-implicit-bool-conversion,

        # Lots of noise. Needs work. ,
       -readability-magic-numbers,

'

CheckOptions:
  - { key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison, value: '1' }

  - { key: cppcoreguidelines-pro-type-member-init.IgnoreArrays, value: '1' }

  - { key: modernize-make-shared.IgnoreMacros,             value: '0' }
  - { key: modernize-make-unique.IgnoreMacros,             value: '0' }
  - { key: modernize-use-bool-literals.IgnoreMacros,       value: '1' }
  - { key: modernize-use-default-member-init.IgnoreMacros, value: '0' }
  - { key: modernize-use-equals-default.IgnoreMacros,      value: '0' }
  - { key: modernize-use-using.IgnoreMacros,               value: '0' }

  - { key: performance-inefficient-vector-operation.VectorLikeClasses,
    value: '::std::vector,QList,QByteArrayList,QItemSelection,QQueue,QStringList' }

  - { key: readability-braces-around-statements.ShortStatementLines,       value: '3' }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,    value: '1' }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,    value: '1' }
  - { key: readability-inconsistent-declaration-parameter-name.strict,     value: '1' }
  - { key: readability-redundant-declaration.IgnoreMacros,                 value: '0' }
  - { key: readability-simplify-boolean-expr.chainedconditionalreturn,     value: '1' }
  - { key: readability-simplify-boolean-expr.chainedconditionalassignment, value: '1' }
  - { key: readability-uppercase-literal-suffix.IgnoreMacros,              value: '0' }
  - { key: readability-simplify-subscript-expr.Types,
    value: '::std::basic_string;::std::basic_string_view;::std::vector;::std::array;QByteArray;QString' }

  - { key: readability-identifier-naming.PrivateMethodCase,     value: 'aNy_CasE' }
  - { key: readability-identifier-naming.PrivateMemberCase,     value: 'camelBack' }
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: 'm_'}
  - { key: readability-identifier-naming.ProtectedMethodCase,   value: 'aNy_CasE' }
  - { key: readability-identifier-naming.ProtectedMemberCase,   value: 'camelBack_CasE' }
  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: 'm_'}
  - { key: readability-identifier-naming.PuplicMethodCase,      value: 'aNy_CasE' }
  - { key: readability-identifier-naming.PuplicMemberCase,      value: 'camelBack' }
  - { key: readability-identifier-naming.PuplicMemberPrefix,    value: 'm_'}
  - { key: readability-identifier-naming.ClassConstantCase,     value: 'Any_Case' }
  - { key: readability-identifier-naming.ClassConstantPrefix,   value: 'k' }

  - { key: google-runtime-int.SignedTypeSuffix,   value: '_t' }
  - { key: google-runtime-int.UnsignedTypeSuffix, value: '_t' }
